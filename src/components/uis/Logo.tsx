/* eslint-disable max-len */
import React, {useEffect, useRef, useState} from 'react';
import {Animated} from 'react-native';
import Svg from 'react-native-svg';
import AnimatedStroke from './AnimatedStroke';

const colors = ['#3498DB', '#8E44AD', '#2ECC71', '#E74C3C', '#E74C3C'];

const path = [
  'M25.8262 41.3105C17.7858 38.9993 11.9264 36.1673 8.24805 32.8145C4.60221 29.429 2.7793 25.2624 2.7793 20.3145C2.7793 14.7155 5.00911 10.0931 9.46875 6.44727C13.9609 2.76888 19.7878 0.929688 26.9492 0.929688C31.832 0.929688 36.1777 1.8737 39.9863 3.76172C43.8275 5.64974 46.7897 8.25391 48.873 11.5742C50.9889 14.8945 52.0469 18.5241 52.0469 22.4629H42.623C42.623 18.166 41.2559 14.7969 38.5215 12.3555C35.7871 9.88151 31.9297 8.64453 26.9492 8.64453C22.3268 8.64453 18.7135 9.66992 16.1094 11.7207C13.5378 13.7389 12.252 16.5547 12.252 20.168C12.252 23.0651 13.4727 25.5228 15.9141 27.541C18.388 29.5267 22.571 31.3496 28.4629 33.0098C34.3874 34.6699 39.0098 36.5091 42.3301 38.5273C45.6829 40.513 48.1569 42.8405 49.752 45.5098C51.3796 48.179 52.1934 51.3203 52.1934 54.9336C52.1934 60.6953 49.9473 65.3177 45.4551 68.8008C40.9629 72.2513 34.957 73.9766 27.4375 73.9766C22.5547 73.9766 17.9974 73.0488 13.7656 71.1934C9.53385 69.3053 6.26237 66.7337 3.95117 63.4785C1.67253 60.2233 0.533203 56.5286 0.533203 52.3945H9.95703C9.95703 56.6914 11.5358 60.0931 14.6934 62.5996C17.8835 65.0736 22.1315 66.3105 27.4375 66.3105C32.3854 66.3105 36.1777 65.3014 38.8145 63.2832C41.4512 61.265 42.7695 58.5143 42.7695 55.0312C42.7695 51.5482 41.5488 48.8626 39.1074 46.9746C36.666 45.054 32.2389 43.166 25.8262 41.3105Z',
  'M116.549 50.4414C115.67 57.9609 112.887 63.7715 108.199 67.873C103.544 71.9421 97.3431 73.9766 89.5957 73.9766C81.1973 73.9766 74.459 70.9655 69.3809 64.9434C64.3353 58.9212 61.8125 50.8646 61.8125 40.7734V33.9375C61.8125 27.3294 62.9844 21.5189 65.3281 16.5059C67.7044 11.4928 71.0573 7.65169 75.3867 4.98242C79.7161 2.2806 84.7292 0.929688 90.4258 0.929688C97.9779 0.929688 104.033 3.04557 108.59 7.27734C113.147 11.4766 115.8 17.3034 116.549 24.7578H107.125C106.311 19.0938 104.537 14.9922 101.803 12.4531C99.1009 9.91406 95.3086 8.64453 90.4258 8.64453C84.4362 8.64453 79.7324 10.8581 76.3145 15.2852C72.929 19.7122 71.2363 26.0111 71.2363 34.1816V41.0664C71.2363 48.7812 72.8477 54.9173 76.0703 59.4746C79.293 64.0319 83.8014 66.3105 89.5957 66.3105C94.804 66.3105 98.7917 65.1387 101.559 62.7949C104.358 60.4186 106.214 56.3008 107.125 50.4414H116.549Z',
  'M155.465 44.2402H138.766V73H129.342V1.90625H152.877C160.885 1.90625 167.037 3.72917 171.334 7.375C175.663 11.0208 177.828 16.3268 177.828 23.293C177.828 27.7201 176.624 31.5775 174.215 34.8652C171.839 38.153 168.518 40.6107 164.254 42.2383L180.953 72.4141V73H170.895L155.465 44.2402Z',
  'M138.766 36.5742H153.17C157.825 36.5742 161.52 35.3698 164.254 32.9609C167.021 30.5521 168.404 27.3294 168.404 23.293C168.404 18.8984 167.086 15.5293 164.449 13.1855C161.845 10.8418 158.069 9.65365 153.121 9.62109H138.766V36.5742Z',
  'M230.27 54.4453H200.484L193.795 73H184.127L211.275 1.90625H219.479L246.676 73H237.057L230.27 54.4453Z',
  'M203.316 46.7305H227.486L215.377 13.4785L203.316 46.7305Z',
  'M299.02 9.62109H276.168V73H266.842V9.62109H244.039V1.90625H299.02V9.62109Z',
  'M360.494 50.4414C359.615 57.9609 356.832 63.7715 352.145 67.873C347.49 71.9421 341.288 73.9766 333.541 73.9766C325.143 73.9766 318.404 70.9655 313.326 64.9434C308.281 58.9212 305.758 50.8646 305.758 40.7734V33.9375C305.758 27.3294 306.93 21.5189 309.273 16.5059C311.65 11.4928 315.003 7.65169 319.332 4.98242C323.661 2.2806 328.674 0.929688 334.371 0.929688C341.923 0.929688 347.978 3.04557 352.535 7.27734C357.092 11.4766 359.745 17.3034 360.494 24.7578H351.07C350.257 19.0938 348.482 14.9922 345.748 12.4531C343.046 9.91406 339.254 8.64453 334.371 8.64453C328.382 8.64453 323.678 10.8581 320.26 15.2852C316.874 19.7122 315.182 26.0111 315.182 34.1816V41.0664C315.182 48.7812 316.793 54.9173 320.016 59.4746C323.238 64.0319 327.747 66.3105 333.541 66.3105C338.749 66.3105 342.737 65.1387 345.504 62.7949C348.303 60.4186 350.159 56.3008 351.07 50.4414H360.494Z',
  'M427.975 73H418.551V40.1387H382.711V73H373.336V1.90625H382.711V32.4727H418.551V1.90625H427.975V73Z',
  'M93.502 190V118.906H116.744C124.459 118.906 130.253 120.501 134.127 123.691C138.033 126.882 139.986 131.602 139.986 137.852C139.986 141.172 139.042 144.118 137.154 146.689C135.266 149.229 132.695 151.198 129.439 152.598C133.281 153.672 136.308 155.723 138.521 158.75C140.768 161.745 141.891 165.326 141.891 169.492C141.891 175.872 139.824 180.885 135.689 184.531C131.555 188.177 125.712 190 118.16 190H93.502Z',
  'M102.877 156.748V182.334H118.355C122.717 182.334 126.152 181.211 128.658 178.965C131.197 176.686 132.467 173.561 132.467 169.59C132.467 161.029 127.812 156.748 118.502 156.748H102.877Z',
  'M102.877 149.229H117.037C121.139 149.229 124.41 148.203 126.852 146.152C129.326 144.102 130.562 141.318 130.562 137.803C130.562 133.896 129.423 131.064 127.145 129.307C124.866 127.516 121.399 126.621 116.744 126.621H102.877V149.229Z',
  'M210.494 156.748C210.494 163.714 209.322 169.801 206.979 175.01C204.635 180.186 201.314 184.141 197.018 186.875C192.721 189.609 187.708 190.977 181.979 190.977C176.38 190.977 171.415 189.609 167.086 186.875C162.757 184.108 159.387 180.186 156.979 175.107C154.602 169.997 153.382 164.089 153.316 157.383V152.256C153.316 145.42 154.505 139.382 156.881 134.141C159.257 128.9 162.61 124.896 166.939 122.129C171.301 119.329 176.282 117.93 181.881 117.93C187.577 117.93 192.59 119.313 196.92 122.08C201.282 124.814 204.635 128.802 206.979 134.043C209.322 139.251 210.494 145.322 210.494 152.256V156.748Z',
  'M201.168 152.158C201.168 143.727 199.475 137.266 196.09 132.773C192.704 128.249 187.968 125.986 181.881 125.986C175.956 125.986 171.285 128.249 167.867 132.773C164.482 137.266 162.74 143.516 162.643 151.523V156.748C162.643 164.919 164.352 171.348 167.77 176.035C171.22 180.69 175.956 183.018 181.979 183.018C188.033 183.018 192.721 180.82 196.041 176.426C199.361 171.999 201.07 165.667 201.168 157.432V152.158Z',
  'M279.244 156.748C279.244 163.714 278.072 169.801 275.729 175.01C273.385 180.186 270.064 184.141 265.768 186.875C261.471 189.609 256.458 190.977 250.729 190.977C245.13 190.977 240.165 189.609 235.836 186.875C231.507 184.108 228.137 180.186 225.729 175.107C223.352 169.997 222.132 164.089 222.066 157.383V152.256C222.066 145.42 223.255 139.382 225.631 134.141C228.007 128.9 231.36 124.896 235.689 122.129C240.051 119.329 245.032 117.93 250.631 117.93C256.327 117.93 261.34 119.313 265.67 122.08C270.032 124.814 273.385 128.802 275.729 134.043C278.072 139.251 279.244 145.322 279.244 152.256V156.748Z',
  'M269.918 152.158C269.918 143.727 268.225 137.266 264.84 132.773C261.454 128.249 256.718 125.986 250.631 125.986C244.706 125.986 240.035 128.249 236.617 132.773C233.232 137.266 231.49 143.516 231.393 151.523V156.748C231.393 164.919 233.102 171.348 236.52 176.035C239.97 180.69 244.706 183.018 250.729 183.018C256.783 183.018 261.471 180.82 264.791 176.426C268.111 171.999 269.82 165.667 269.918 157.432V152.158Z',
  'M311.373 156.943L302.682 165.977V190H293.307V118.906H302.682V154.062L334.273 118.906H345.602L317.623 150.303L347.799 190H336.568L311.373 156.943Z',
];

interface Props {
  width?: number;
  height?: number;
}

export default function Logo(props: Props): React.ReactElement {
  const width =
    props.width ?? (props.height ? (props.height * 428) / 200 : 428);

  const height =
    props.height ?? (props.width ? (props.width * 200) / 428 : 200);

  const [isAnimationEnded, setIsAnimationEnded] = useState(false);
  const progress = useRef(new Animated.Value(0)).current;

  useEffect(() => {
    Animated.timing(progress, {
      toValue: 1,
      duration: 2000,
      useNativeDriver: false,
    }).start(() => {
      setIsAnimationEnded(true);
    });
  }, [progress]);

  return (
    <Svg width={width} height={height} viewBox="0 -3 430 197" fill="none">
      {path.map((d, index) => {
        const splited = d.split(/[a-zA-Z]/);

        const circular =
          splited.length > 0 && splited[0] === splited[splited.length - 1];

        return (
          <AnimatedStroke
            key={index}
            d={d}
            stroke={colors[index % colors.length]}
            strokeWidth={5}
            fill={
              isAnimationEnded && !circular
                ? colors[index % colors.length]
                : 'none'
            }
            progress={progress}
          />
        );
      })}
    </Svg>
  );
}
